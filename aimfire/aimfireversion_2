#!/usr/bin/env python

import cv2
import numpy as np
import rospy
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist


rospy.init_node('aimfire',anonymous=True)

global pub
global move
global laser_range

rotate_speed = 0.3
linear_speed = 0.3
stop_distance = 0.25
laser_range = np.array([])
move = Twist()
pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)

def turnrobot():
    cap = cv2.VideoCapture(0)

    cap.set(3, 480)
    cap.set(4, 320)

    _, frame = cap.read()
    rows, cols, _ = frame.shape

    x_medium = int(cols / 2)
    center = int(cols / 2)
    off =  True
    
    while off:
        _, frame = cap.read()
        hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        # red color
        low_red = np.array([161, 155, 84])
        high_red = np.array([179, 255, 255])
        red_mask = cv2.inRange(hsv_frame, low_red, high_red)
        _, contours, _ = cv2.findContours(red_mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        contours = sorted(contours, key=lambda x:cv2.contourArea(x), reverse=True)

        for cnt in contours:
            (x, y, w, h) = cv2.boundingRect(cnt)

            x_medium = int((x + x + w) / 2)
            break

        cv2.line(frame, (x_medium, 0), (x_medium, 480), (0, 255, 0), 2)

        cv2.imshow("Frame", frame)


        key = cv2.waitKey(1)

        if key == 27:
            break

        # Rotate turtlebot

        if x_medium < center -20:
            move.linear.x = 0.0
            move.angular.z = 3.0
            time.sleep(1)
            pub.publish(move)
        elif x_medium > center + 20:
            move.linear.x = 0.0
            move.angular.z = -3.0
            time.sleep(1)
            pub.publish(move)
            
        else:
            move.linear.x = 0.0
            move.angular.z = 0.0
            time.sleep(1)
            pub.publish(move)
            off = False
        #command to rotate turtlebot based on turtlebot_position

    cap.release()

    cv2.destroyAllWindows()

def aimfire():
    rospy.init_node('aimfire', anonymous=True)
    rospy.Subscriber('scan', LaserScan, get_laserscan)     # subscribe to LaserScan data
    rate = rospy.Rate(5) # 5 Hz
    while not rospy.is_shutdown():
        lr2 = laser_range[0][0]
        if lr2 > stop_distance:
            move.linear.x = linear_speed
            move.angular.z = 0.0
            time.sleep(1)
            pub.publish(move)
        elif lr2 <= stop_distance:
            move.linear.x = 0.0
            move.angular.z = 0.0
            time.sleep(1)
            pub.publish(move)
            turnrobot()
            
  
if __name__ == '__main__':
    try:
        aimfire()
    except rospy.ROSInterruptException:
        pass
